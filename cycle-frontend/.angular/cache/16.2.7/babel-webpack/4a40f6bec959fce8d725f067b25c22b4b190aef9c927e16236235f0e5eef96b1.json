{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CalculateComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const spot_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", spot_r2.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(spot_r2.name);\n  }\n}\nfunction CalculateComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Estimated Cycling Time: \", ctx_r1.estimatedTime, \" hours\");\n  }\n}\nexport class CalculateComponent {\n  constructor(http) {\n    this.http = http;\n    this.userLocation = {\n      latitude: 0,\n      longitude: 0\n    };\n    this.chosenSpot = '';\n    this.cyclingSpeed = 0;\n    this.dailyCyclingHours = 0;\n    this.estimatedTime = null;\n    this.spotDetails = []; // Array to store spot details\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(response => {\n      this.spotDetails = response;\n    }, error => {\n      console.error('Failed to fetch spot details:', error);\n    });\n  }\n  calculateTime() {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find(spot => spot.name === this.chosenSpot);\n    if (selectedSpot) {\n      this.userLocation.latitude = selectedSpot.latitude;\n      this.userLocation.longitude = selectedSpot.longitude;\n    } else {\n      console.error('Spot not found in spot details');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculate';\n    const requestBody = {\n      userLocation: this.userLocation,\n      chosenSpot: this.chosenSpot,\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n    this.http.post(url, requestBody, options).subscribe(response => {\n      this.estimatedTime = response;\n    }, error => {\n      console.error('Calculation failed:', error);\n      this.estimatedTime = null;\n    });\n  }\n  static #_ = this.ɵfac = function CalculateComponent_Factory(t) {\n    return new (t || CalculateComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalculateComponent,\n    selectors: [[\"app-calculate\"]],\n    decls: 27,\n    vars: 7,\n    consts: [[1, \"container\"], [1, \"form-group\"], [\"for\", \"chosenSpot\"], [\"id\", \"chosenSpot\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"latitude\"], [\"type\", \"number\", \"id\", \"latitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"longitude\"], [\"type\", \"number\", \"id\", \"longitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"cyclingSpeed\"], [\"type\", \"number\", \"id\", \"cyclingSpeed\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dailyCyclingHours\"], [\"type\", \"number\", \"id\", \"dailyCyclingHours\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function CalculateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Calculate Estimated Cycling Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n        i0.ɵɵtext(5, \"Choose a spot:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_select_ngModelChange_6_listener($event) {\n          return ctx.chosenSpot = $event;\n        });\n        i0.ɵɵtemplate(7, CalculateComponent_option_7_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"User's Latitude:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.userLocation.latitude = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 1)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"User's Longitude:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.userLocation.longitude = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 1)(17, \"label\", 9);\n        i0.ɵɵtext(18, \"Cycling Speed (km/h):\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_19_listener($event) {\n          return ctx.cyclingSpeed = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 1)(21, \"label\", 11);\n        i0.ɵɵtext(22, \"Daily Cycling Hours:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_23_listener($event) {\n          return ctx.dailyCyclingHours = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function CalculateComponent_Template_button_click_24_listener() {\n          return ctx.calculateTime();\n        });\n        i0.ɵɵtext(25, \"Calculate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, CalculateComponent_div_26_Template, 3, 1, \"div\", 14);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.chosenSpot);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.spotDetails);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.userLocation.latitude);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.userLocation.longitude);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.cyclingSpeed);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.dailyCyclingHours);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.estimatedTime !== null);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["HttpHeaders","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","spot_r2","name","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate1","ctx_r1","estimatedTime","CalculateComponent","constructor","http","userLocation","latitude","longitude","chosenSpot","cyclingSpeed","dailyCyclingHours","spotDetails","token","localStorage","getItem","console","error","headers","set","options","get","subscribe","response","calculateTime","selectedSpot","find","spot","url","requestBody","post","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","CalculateComponent_Template","rf","ctx","ɵɵlistener","CalculateComponent_Template_select_ngModelChange_6_listener","$event","ɵɵtemplate","CalculateComponent_option_7_Template","CalculateComponent_Template_input_ngModelChange_11_listener","CalculateComponent_Template_input_ngModelChange_15_listener","CalculateComponent_Template_input_ngModelChange_19_listener","CalculateComponent_Template_input_ngModelChange_23_listener","CalculateComponent_Template_button_click_24_listener","CalculateComponent_div_26_Template"],"sources":["C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\calculate\\calculate.component.ts","C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\calculate\\calculate.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-calculate',\n  templateUrl: './calculate.component.html',\n  styleUrls: ['./calculate.component.css']\n})\nexport class CalculateComponent {\n  userLocation: { latitude: number; longitude: number } = { latitude: 0, longitude: 0 };\n  chosenSpot: string = '';\n  cyclingSpeed: number = 0;\n  dailyCyclingHours: number = 0;\n  estimatedTime: number | null = null;\n  spotDetails: any[] = []; // Array to store spot details\n\n  constructor(private http: HttpClient) {\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(\n      (response: any) => {\n        this.spotDetails = response;\n      },\n      (error) => {\n        console.error('Failed to fetch spot details:', error);\n      }\n    );\n  }\n\n  calculateTime(): void {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find((spot) => spot.name === this.chosenSpot);\n\n    if (selectedSpot) {\n      this.userLocation.latitude = selectedSpot.latitude;\n      this.userLocation.longitude = selectedSpot.longitude;\n    } else {\n      console.error('Spot not found in spot details');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculate';\n    const requestBody = {\n      userLocation: this.userLocation,\n      chosenSpot: this.chosenSpot,\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n\n    this.http.post<number>(url, requestBody, options).subscribe(\n      (response: number) => {\n        this.estimatedTime = response;\n      },\n      (error) => {\n        console.error('Calculation failed:', error);\n        this.estimatedTime = null;\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <h2>Calculate Estimated Cycling Time</h2>\n\n  <!-- Dropdown to select a spot -->\n  <div class=\"form-group\">\n    <label for=\"chosenSpot\">Choose a spot:</label>\n    <select id=\"chosenSpot\" [(ngModel)]=\"chosenSpot\">\n      <option *ngFor=\"let spot of spotDetails\" [value]=\"spot.name\">{{ spot.name }}</option>\n    </select>\n  </div>\n\n  <!-- Input fields for user's location -->\n  <div class=\"form-group\">\n    <label for=\"latitude\">User's Latitude:</label>\n    <input type=\"number\" id=\"latitude\" [(ngModel)]=\"userLocation.latitude\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"longitude\">User's Longitude:</label>\n    <input type=\"number\" id=\"longitude\" [(ngModel)]=\"userLocation.longitude\" />\n  </div>\n\n  <!-- Input fields for cycling speed and daily cycling hours -->\n  <div class=\"form-group\">\n    <label for=\"cyclingSpeed\">Cycling Speed (km/h):</label>\n    <input type=\"number\" id=\"cyclingSpeed\" [(ngModel)]=\"cyclingSpeed\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"dailyCyclingHours\">Daily Cycling Hours:</label>\n    <input type=\"number\" id=\"dailyCyclingHours\" [(ngModel)]=\"dailyCyclingHours\" />\n  </div>\n\n  <!-- Button to calculate the estimated time -->\n  <button (click)=\"calculateTime()\">Calculate</button>\n\n  <!-- Display the estimated time -->\n  <div *ngIf=\"estimatedTime !== null\">\n    <p>Estimated Cycling Time: {{ estimatedTime }} hours</p>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}