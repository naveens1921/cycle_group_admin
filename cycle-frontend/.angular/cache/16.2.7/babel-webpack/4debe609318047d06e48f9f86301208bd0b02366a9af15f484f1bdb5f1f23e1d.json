{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class SpotService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:4000'; // Replace with your API base URL\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.getToken() // Get the token from where you have stored it\n    });\n  }\n  // Helper function to get the JWT token from storage (e.g., local storage)\n  getToken() {\n    return localStorage.getItem('token'); // Replace with your storage method\n  }\n  // Fetch spot details by name\n  getSpotDetails(spotName) {\n    const url = `${this.baseUrl}/spot/${spotName}`;\n    return this.http.get(url, {\n      headers: this.headers\n    });\n  }\n  // Fetch a list of spot names\n  getSpotNames() {\n    const url = `${this.baseUrl}/spots/limit`;\n    return this.http.get(url, {\n      headers: this.headers\n    });\n  }\n  static #_ = this.ɵfac = function SpotService_Factory(t) {\n    return new (t || SpotService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotService,\n    factory: SpotService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","SpotService","constructor","http","baseUrl","headers","Authorization","getToken","localStorage","getItem","getSpotDetails","spotName","url","get","getSpotNames","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\spot.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SpotService {\n  private baseUrl = 'http://localhost:4000'; // Replace with your API base URL\n  private headers: HttpHeaders;\n\n  constructor(private http: HttpClient) {\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Bearer ' + this.getToken(), // Get the token from where you have stored it\n    });\n  }\n\n  // Helper function to get the JWT token from storage (e.g., local storage)\n  private getToken(): string | null {\n    return localStorage.getItem('token'); // Replace with your storage method\n  }\n\n  // Fetch spot details by name\n  getSpotDetails(spotName: string) {\n    const url = `${this.baseUrl}/spot/${spotName}`;\n    return this.http.get(url, { headers: this.headers });\n  }\n\n  // Fetch a list of spot names\n  getSpotNames() {\n    const url = `${this.baseUrl}/spots/limit`;\n    return this.http.get(url, { headers: this.headers });\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAM9D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,OAAO,GAAG,uBAAuB,CAAC,CAAC;IAIzC,IAAI,CAACC,OAAO,GAAG,IAAIL,WAAW,CAAC;MAC7B,cAAc,EAAE,kBAAkB;MAClCM,aAAa,EAAE,SAAS,GAAG,IAAI,CAACC,QAAQ,EAAE,CAAE;KAC7C,CAAC;EACJ;EAEA;EACQA,QAAQA,CAAA;IACd,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;EACxC;EAEA;EACAC,cAAcA,CAACC,QAAgB;IAC7B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,SAASO,QAAQ,EAAE;IAC9C,OAAO,IAAI,CAACR,IAAI,CAACU,GAAG,CAACD,GAAG,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;EACtD;EAEA;EACAS,YAAYA,CAAA;IACV,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACR,OAAO,cAAc;IACzC,OAAO,IAAI,CAACD,IAAI,CAACU,GAAG,CAACD,GAAG,EAAE;MAAEP,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,CAAC;EACtD;EAAC,QAAAU,CAAA,G;qBA1BUd,WAAW,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXnB,WAAW;IAAAoB,OAAA,EAAXpB,WAAW,CAAAqB,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}