{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CalculateComponent_option_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 15);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const spot_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", spot_r2.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(spot_r2.name);\n  }\n}\nfunction CalculateComponent_div_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Estimated Cycling Time: \", ctx_r1.accessibleMessage, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Estimated Cycling Time: \", i0.ɵɵpipeBind2(5, 2, ctx_r1.estimatedTime.estimatedTimeInHours, \"1.1-2\"), \" hours\");\n  }\n}\nexport class CalculateComponent {\n  constructor(http) {\n    this.http = http;\n    this.estimatedTime = null;\n    this.userLocation = {\n      latitude: 0,\n      longitude: 0\n    };\n    this.chosenSpot = '';\n    this.cyclingSpeed = 0;\n    this.dailyCyclingHours = 0;\n    this.accessibleMessage = '';\n    this.resultTime = 0;\n    this.spotDetails = []; // Array to store spot details\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(response => {\n      this.spotDetails = response;\n    }, error => {\n      console.error('Failed to fetch spot details:', error);\n    });\n  }\n  calculateTime() {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find(spot => spot.name === this.chosenSpot);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculatebyaccesible';\n    const requestBody = {\n      userLocation: {\n        latitude: this.userLocation.latitude,\n        longitude: this.userLocation.longitude\n      },\n      chosenSpot: {\n        latitude: selectedSpot.latitude,\n        longitude: selectedSpot.longitude,\n        accessible_by_cycling: selectedSpot.accessible_by_cycling\n      },\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n    this.http.post(url, requestBody, options).subscribe(response => {\n      this.estimatedTime = response;\n      this.accessibleMessage = response.message;\n    }, error => {\n      console.error('Calculation failed:', error);\n      this.estimatedTime = null;\n    });\n  }\n  static #_ = this.ɵfac = function CalculateComponent_Factory(t) {\n    return new (t || CalculateComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CalculateComponent,\n    selectors: [[\"app-calculate\"]],\n    decls: 27,\n    vars: 7,\n    consts: [[1, \"container\"], [1, \"form-group\"], [\"for\", \"chosenSpot\"], [\"id\", \"chosenSpot\", 3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"latitude\"], [\"type\", \"number\", \"id\", \"latitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"longitude\"], [\"type\", \"number\", \"id\", \"longitude\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"cyclingSpeed\"], [\"type\", \"number\", \"id\", \"cyclingSpeed\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"dailyCyclingHours\"], [\"type\", \"number\", \"id\", \"dailyCyclingHours\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngIf\"], [3, \"value\"]],\n    template: function CalculateComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n        i0.ɵɵtext(2, \"Calculate Estimated Cycling Time\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 1)(4, \"label\", 2);\n        i0.ɵɵtext(5, \"Choose a spot:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"select\", 3);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_select_ngModelChange_6_listener($event) {\n          return ctx.chosenSpot = $event;\n        });\n        i0.ɵɵtemplate(7, CalculateComponent_option_7_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 1)(9, \"label\", 5);\n        i0.ɵɵtext(10, \"User's Latitude:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_11_listener($event) {\n          return ctx.userLocation.latitude = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"div\", 1)(13, \"label\", 7);\n        i0.ɵɵtext(14, \"User's Longitude:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_15_listener($event) {\n          return ctx.userLocation.longitude = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(16, \"div\", 1)(17, \"label\", 9);\n        i0.ɵɵtext(18, \"Cycling Speed (km/h):\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"input\", 10);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_19_listener($event) {\n          return ctx.cyclingSpeed = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(20, \"div\", 1)(21, \"label\", 11);\n        i0.ɵɵtext(22, \"Daily Cycling Hours:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"input\", 12);\n        i0.ɵɵlistener(\"ngModelChange\", function CalculateComponent_Template_input_ngModelChange_23_listener($event) {\n          return ctx.dailyCyclingHours = $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(24, \"button\", 13);\n        i0.ɵɵlistener(\"click\", function CalculateComponent_Template_button_click_24_listener() {\n          return ctx.calculateTime();\n        });\n        i0.ɵɵtext(25, \"Calculate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(26, CalculateComponent_div_26_Template, 6, 5, \"div\", 14);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.chosenSpot);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.spotDetails);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.userLocation.latitude);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.userLocation.longitude);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.cyclingSpeed);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.dailyCyclingHours);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.estimatedTime !== null);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i2.DecimalPipe],\n    styles: [\".container[_ngcontent-%COMP%] {\\n    max-width: 600px;\\n    margin: 0 auto;\\n    padding: 20px;\\n    background-color: #f5f5f5;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  h2[_ngcontent-%COMP%] {\\n    font-size: 24px;\\n    margin-bottom: 20px;\\n  }\\n  \\n  .form-group[_ngcontent-%COMP%] {\\n    margin-bottom: 15px;\\n  }\\n  \\n  label[_ngcontent-%COMP%] {\\n    display: block;\\n    font-weight: bold;\\n    margin-bottom: 5px;\\n  }\\n  \\n  input[type=\\\"number\\\"][_ngcontent-%COMP%] {\\n    width: 96%;\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  select[_ngcontent-%COMP%] {\\n    width: 100%;\\n    padding: 10px;\\n    border: 1px solid #ccc;\\n    border-radius: 5px;\\n  }\\n  \\n  button[_ngcontent-%COMP%] {\\n    background-color: #007BFF;\\n    color: #fff;\\n    padding: 10px 20px;\\n    border: none;\\n    border-radius: 5px;\\n    cursor: pointer;\\n    font-size: 16px;\\n  }\\n  \\n  button[_ngcontent-%COMP%]:hover {\\n    background-color: #0056b3;\\n  }\\n  \\n  p[_ngcontent-%COMP%] {\\n    margin-top: 10px;\\n    font-size: 18px;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2FsY3VsYXRlL2NhbGN1bGF0ZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxhQUFhO0lBQ2IseUJBQXlCO0lBQ3pCLHNCQUFzQjtJQUN0QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxlQUFlO0lBQ2YsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsbUJBQW1CO0VBQ3JCOztFQUVBO0lBQ0UsY0FBYztJQUNkLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxVQUFVO0lBQ1YsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxXQUFXO0lBQ1gsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSx5QkFBeUI7SUFDekIsV0FBVztJQUNYLGtCQUFrQjtJQUNsQixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGVBQWU7SUFDZixlQUFlO0VBQ2pCOztFQUVBO0lBQ0UseUJBQXlCO0VBQzNCOztFQUVBO0lBQ0UsZ0JBQWdCO0lBQ2hCLGVBQWU7RUFDakIiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcclxuICAgIG1heC13aWR0aDogNjAwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHBhZGRpbmc6IDIwcHg7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjVmNWY1O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2NjYztcclxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICB9XHJcbiAgXHJcbiAgaDIge1xyXG4gICAgZm9udC1zaXplOiAyNHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbiAgXHJcbiAgLmZvcm0tZ3JvdXAge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgbGFiZWwge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBmb250LXdlaWdodDogYm9sZDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICB9XHJcbiAgXHJcbiAgaW5wdXRbdHlwZT1cIm51bWJlclwiXSB7XHJcbiAgICB3aWR0aDogOTYlO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICAgIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1cHg7XHJcbiAgfVxyXG4gIFxyXG4gIHNlbGVjdCB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b24ge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwN0JGRjtcclxuICAgIGNvbG9yOiAjZmZmO1xyXG4gICAgcGFkZGluZzogMTBweCAyMHB4O1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gIH1cclxuICBcclxuICBidXR0b246aG92ZXIge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwNTZiMztcclxuICB9XHJcbiAgXHJcbiAgcCB7XHJcbiAgICBtYXJnaW4tdG9wOiAxMHB4O1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["HttpHeaders","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","spot_r2","name","ɵɵadvance","ɵɵtextInterpolate","ɵɵtextInterpolate1","ctx_r1","accessibleMessage","ɵɵpipeBind2","estimatedTime","estimatedTimeInHours","CalculateComponent","constructor","http","userLocation","latitude","longitude","chosenSpot","cyclingSpeed","dailyCyclingHours","resultTime","spotDetails","token","localStorage","getItem","console","error","headers","set","options","get","subscribe","response","calculateTime","selectedSpot","find","spot","url","requestBody","accessible_by_cycling","post","message","_","ɵɵdirectiveInject","i1","HttpClient","_2","selectors","decls","vars","consts","template","CalculateComponent_Template","rf","ctx","ɵɵlistener","CalculateComponent_Template_select_ngModelChange_6_listener","$event","ɵɵtemplate","CalculateComponent_option_7_Template","CalculateComponent_Template_input_ngModelChange_11_listener","CalculateComponent_Template_input_ngModelChange_15_listener","CalculateComponent_Template_input_ngModelChange_19_listener","CalculateComponent_Template_input_ngModelChange_23_listener","CalculateComponent_Template_button_click_24_listener","CalculateComponent_div_26_Template"],"sources":["C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\calculate\\calculate.component.ts","C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\calculate\\calculate.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-calculate',\n  templateUrl: './calculate.component.html',\n  styleUrls: ['./calculate.component.css']\n})\nexport class CalculateComponent {\n  estimatedTime: { estimatedTimeInHours: number } | null = null;\n\n  userLocation: { latitude: number; longitude: number } = { latitude: 0, longitude: 0 };\n  chosenSpot: string = '';\n  cyclingSpeed: number = 0;\n  dailyCyclingHours: number = 0;\n  accessibleMessage:string='';\n  resultTime:number=0;\n  spotDetails: any[] = []; // Array to store spot details\n\n  constructor(private http: HttpClient) {\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(\n      (response: any) => {\n        this.spotDetails = response;\n      },\n      (error) => {\n        console.error('Failed to fetch spot details:', error);\n      }\n    );\n  }\n\n  calculateTime(): void {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find((spot) => spot.name === this.chosenSpot);\n\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculatebyaccesible';\n    const requestBody = {\n      userLocation: {\n        latitude: this.userLocation.latitude,\n        longitude: this.userLocation.longitude\n      },\n      chosenSpot: {\n        latitude: selectedSpot.latitude,\n        longitude: selectedSpot.longitude,\n        accessible_by_cycling: selectedSpot.accessible_by_cycling\n\n      },\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n\n\n    this.http.post<{ estimatedTimeInHours: number }>(url, requestBody, options).subscribe(\n      (response:any) => {\n        this.estimatedTime = response;\n        this.accessibleMessage=response.message;\n      },\n      (error) => {\n        console.error('Calculation failed:', error);\n        this.estimatedTime = null;\n      }\n    );\n  }\n}\n","<div class=\"container\">\n  <h2>Calculate Estimated Cycling Time</h2>\n\n  <!-- Dropdown to select a spot -->\n  <div class=\"form-group\">\n    <label for=\"chosenSpot\">Choose a spot:</label>\n    <select id=\"chosenSpot\" [(ngModel)]=\"chosenSpot\">\n      <option *ngFor=\"let spot of spotDetails\" [value]=\"spot.name\">{{ spot.name }}</option>\n    </select>\n  </div>\n\n  <!-- Input fields for user's location -->\n  <div class=\"form-group\">\n    <label for=\"latitude\">User's Latitude:</label>\n    <input type=\"number\" id=\"latitude\" [(ngModel)]=\"userLocation.latitude\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"longitude\">User's Longitude:</label>\n    <input type=\"number\" id=\"longitude\" [(ngModel)]=\"userLocation.longitude\" />\n  </div>\n\n  <!-- Input fields for cycling speed and daily cycling hours -->\n  <div class=\"form-group\">\n    <label for=\"cyclingSpeed\">Cycling Speed (km/h):</label>\n    <input type=\"number\" id=\"cyclingSpeed\" [(ngModel)]=\"cyclingSpeed\" />\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"dailyCyclingHours\">Daily Cycling Hours:</label>\n    <input type=\"number\" id=\"dailyCyclingHours\" [(ngModel)]=\"dailyCyclingHours\" />\n  </div>\n\n  <!-- Button to calculate the estimated time -->\n  <button (click)=\"calculateTime()\">Calculate</button>\n\n\n  <!-- Display the estimated time -->\n  <div *ngIf=\"estimatedTime !== null\">\n    <p>Estimated Cycling Time: {{ accessibleMessage }} </p>\n\n    <p>Estimated Cycling Time: {{ estimatedTime.estimatedTimeInHours | number: '1.1-2' }} hours</p>\n  </div>\n</div>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}