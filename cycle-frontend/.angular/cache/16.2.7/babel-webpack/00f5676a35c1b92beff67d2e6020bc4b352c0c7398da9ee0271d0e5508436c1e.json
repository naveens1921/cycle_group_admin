{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.isAuthenticated = false;\n    // Check if the user is already authenticated (e.g., with a stored token)\n    this.isAuthenticated = !!localStorage.getItem('token');\n  }\n  login(username, password) {\n    const userData = {\n      username,\n      password\n    };\n    this.http.post('http://localhost:4000/auth/login', userData).subscribe(response => {\n      const token = response.token;\n      localStorage.setItem('token', token);\n      // Mark the user as authenticated\n      this.isAuthenticated = true;\n      // Redirect to the user's dashboard or another page upon successful login\n      this.router.navigate(['/spots']);\n    }, error => {\n      console.error('Login failed:', error);\n    });\n  }\n  register(username, password) {\n    const userData = {\n      username,\n      password\n    };\n    this.http.post('http://localhost:4000/auth/register', userData).subscribe(response => {\n      // Handle registration success (if needed)\n      console.log('Registration successful:', response);\n    }, error => {\n      console.error('Registration failed:', error);\n    });\n  }\n  logout() {\n    // Remove the token from storage and mark the user as not authenticated\n    localStorage.removeItem('token');\n    this.isAuthenticated = false;\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["AuthService","constructor","http","router","isAuthenticated","localStorage","getItem","login","username","password","userData","post","subscribe","response","token","setItem","navigate","error","console","register","log","logout","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\auth.service.ts"],"sourcesContent":["// auth.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  isAuthenticated: boolean = false;\n\n  constructor(private http: HttpClient, private router: Router) {\n    // Check if the user is already authenticated (e.g., with a stored token)\n    this.isAuthenticated = !!localStorage.getItem('token');\n  }\n\n  login(username: string, password: string): void {\n    const userData = {\n      username,\n      password\n    };\n\n    this.http.post('http://localhost:4000/auth/login', userData).subscribe(\n      (response: any) => {\n        const token = response.token;\n        localStorage.setItem('token', token);\n\n        // Mark the user as authenticated\n        this.isAuthenticated = true;\n\n        // Redirect to the user's dashboard or another page upon successful login\n        this.router.navigate(['/spots']);\n      },\n      (error) => {\n        console.error('Login failed:', error);\n      }\n    );\n  }\n\n  register(username: string, password: string): void {\n    const userData = {\n      username,\n      password\n    };\n\n    this.http.post('http://localhost:4000/auth/register', userData).subscribe(\n      (response: any) => {\n        // Handle registration success (if needed)\n        console.log('Registration successful:', response);\n      },\n      (error) => {\n        console.error('Registration failed:', error);\n      }\n    );\n  }\n\n  logout(): void {\n    // Remove the token from storage and mark the user as not authenticated\n    localStorage.removeItem('token');\n    this.isAuthenticated = false;\n\n    // Redirect to the login page after logout\n    this.router.navigate(['/login']);\n  }\n}\n"],"mappings":";;;AASA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAFpD,KAAAC,eAAe,GAAY,KAAK;IAG9B;IACA,IAAI,CAACA,eAAe,GAAG,CAAC,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACxD;EAEAC,KAAKA,CAACC,QAAgB,EAAEC,QAAgB;IACtC,MAAMC,QAAQ,GAAG;MACfF,QAAQ;MACRC;KACD;IAED,IAAI,CAACP,IAAI,CAACS,IAAI,CAAC,kCAAkC,EAAED,QAAQ,CAAC,CAACE,SAAS,CACnEC,QAAa,IAAI;MAChB,MAAMC,KAAK,GAAGD,QAAQ,CAACC,KAAK;MAC5BT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAED,KAAK,CAAC;MAEpC;MACA,IAAI,CAACV,eAAe,GAAG,IAAI;MAE3B;MACA,IAAI,CAACD,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC,CAAC,CACF;EACH;EAEAE,QAAQA,CAACX,QAAgB,EAAEC,QAAgB;IACzC,MAAMC,QAAQ,GAAG;MACfF,QAAQ;MACRC;KACD;IAED,IAAI,CAACP,IAAI,CAACS,IAAI,CAAC,qCAAqC,EAAED,QAAQ,CAAC,CAACE,SAAS,CACtEC,QAAa,IAAI;MAChB;MACAK,OAAO,CAACE,GAAG,CAAC,0BAA0B,EAAEP,QAAQ,CAAC;IACnD,CAAC,EACAI,KAAK,IAAI;MACRC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C,CAAC,CACF;EACH;EAEAI,MAAMA,CAAA;IACJ;IACAhB,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAAClB,eAAe,GAAG,KAAK;IAE5B;IACA,IAAI,CAACD,MAAM,CAACa,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;EAAC,QAAAO,CAAA,G;qBAvDUvB,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX9B,WAAW;IAAA+B,OAAA,EAAX/B,WAAW,CAAAgC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}