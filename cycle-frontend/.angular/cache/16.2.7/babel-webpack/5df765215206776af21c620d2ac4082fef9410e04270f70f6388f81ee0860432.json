{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nexport let CalculateComponent = class CalculateComponent {\n  constructor(http) {\n    this.http = http;\n    this.userLocation = {\n      latitude: 0,\n      longitude: 0\n    };\n    this.chosenSpot = '';\n    this.cyclingSpeed = 0;\n    this.dailyCyclingHours = 0;\n    this.estimatedTime = null;\n    this.spotDetails = []; // Array to store spot details\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(response => {\n      this.spotDetails = response;\n    }, error => {\n      console.error('Failed to fetch spot details:', error);\n    });\n  }\n  calculateTime() {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find(spot => spot.name === this.chosenSpot);\n    if (selectedSpot) {\n      // this.userLocation.latitude = selectedSpot.latitude;\n      // this.userLocation.longitude = selectedSpot.longitude;\n    } else {\n      console.error('Spot not found in spot details');\n      return;\n    }\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = {\n      headers\n    };\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculate';\n    const requestBody = {\n      currentLocation: {\n        latitude: this.userLocation.latitude,\n        longitude: this.userLocation.longitude\n      },\n      chosenSpot: {\n        latitude: selectedSpot.latitude,\n        longitude: selectedSpot.longitude\n      },\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n    this.http.post(url, requestBody, options).subscribe(response => {\n      this.estimatedTime = response;\n    }, error => {\n      console.error('Calculation failed:', error);\n      this.estimatedTime = null;\n    });\n  }\n};\nCalculateComponent = __decorate([Component({\n  selector: 'app-calculate',\n  templateUrl: './calculate.component.html',\n  styleUrls: ['./calculate.component.css']\n})], CalculateComponent);","map":{"version":3,"names":["Component","HttpHeaders","CalculateComponent","constructor","http","userLocation","latitude","longitude","chosenSpot","cyclingSpeed","dailyCyclingHours","estimatedTime","spotDetails","token","localStorage","getItem","console","error","headers","set","options","get","subscribe","response","calculateTime","selectedSpot","find","spot","name","url","requestBody","currentLocation","post","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Mobile Programming\\cycle_around_world\\cycle-frontend\\src\\app\\calculate\\calculate.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-calculate',\n  templateUrl: './calculate.component.html',\n  styleUrls: ['./calculate.component.css']\n})\nexport class CalculateComponent {\n  userLocation: { latitude: number; longitude: number } = { latitude: 0, longitude: 0 };\n  chosenSpot: string = '';\n  cyclingSpeed: number = 0;\n  dailyCyclingHours: number = 0;\n  estimatedTime: number | null = null;\n  spotDetails: any[] = []; // Array to store spot details\n\n  constructor(private http: HttpClient) {\n    // Fetch all spot details from the server\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for fetching all spots.\n    this.http.get('http://localhost:4000/spots/getallspots', options).subscribe(\n      (response: any) => {\n        this.spotDetails = response;\n      },\n      (error) => {\n        console.error('Failed to fetch spot details:', error);\n      }\n    );\n  }\n\n  calculateTime(): void {\n    // Find the chosen spot's latitude and longitude based on the selected spot's name\n    const selectedSpot = this.spotDetails.find((spot) => spot.name === this.chosenSpot);\n\n    if (selectedSpot) {\n      // this.userLocation.latitude = selectedSpot.latitude;\n      // this.userLocation.longitude = selectedSpot.longitude;\n    } else {\n      console.error('Spot not found in spot details');\n      return;\n    }\n\n    const token = localStorage.getItem('token');\n    if (!token) {\n      console.error('No token found. Please log in.');\n      return;\n    }\n\n    const headers = new HttpHeaders().set('Authorization', `${token}`);\n    const options = { headers };\n\n    // Adjust the URL to match your server's endpoint for calculating the time.\n    const url = 'http://localhost:4000/spots/calculate';\n    const requestBody = {\n      currentLocation: {\n        latitude: this.userLocation.latitude,\n        longitude: this.userLocation.longitude\n      },\n      chosenSpot: {\n        latitude: selectedSpot.latitude,\n        longitude: selectedSpot.longitude\n      },\n      cyclingSpeed: this.cyclingSpeed,\n      dailyCyclingHours: this.dailyCyclingHours\n    };\n    \n\n    this.http.post<number>(url, requestBody, options).subscribe(\n      (response: number) => {\n        this.estimatedTime = response;\n      },\n      (error) => {\n        console.error('Calculation failed:', error);\n        this.estimatedTime = null;\n      }\n    );\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAqBC,WAAW,QAAQ,sBAAsB;AAOvD,WAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAQ7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAPxB,KAAAC,YAAY,GAA4C;MAAEC,QAAQ,EAAE,CAAC;MAAEC,SAAS,EAAE;IAAC,CAAE;IACrF,KAAAC,UAAU,GAAW,EAAE;IACvB,KAAAC,YAAY,GAAW,CAAC;IACxB,KAAAC,iBAAiB,GAAW,CAAC;IAC7B,KAAAC,aAAa,GAAkB,IAAI;IACnC,KAAAC,WAAW,GAAU,EAAE,CAAC,CAAC;IAGvB;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;;IAGF,MAAMC,OAAO,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CAAC,eAAe,EAAE,GAAGN,KAAK,EAAE,CAAC;IAClE,MAAMO,OAAO,GAAG;MAAEF;IAAO,CAAE;IAE3B;IACA,IAAI,CAACd,IAAI,CAACiB,GAAG,CAAC,yCAAyC,EAAED,OAAO,CAAC,CAACE,SAAS,CACxEC,QAAa,IAAI;MAChB,IAAI,CAACX,WAAW,GAAGW,QAAQ;IAC7B,CAAC,EACAN,KAAK,IAAI;MACRD,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD,CAAC,CACF;EACH;EAEAO,aAAaA,CAAA;IACX;IACA,MAAMC,YAAY,GAAG,IAAI,CAACb,WAAW,CAACc,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAK,IAAI,CAACpB,UAAU,CAAC;IAEnF,IAAIiB,YAAY,EAAE;MAChB;MACA;IAAA,CACD,MAAM;MACLT,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;;IAGF,MAAMJ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAI,CAACF,KAAK,EAAE;MACVG,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;MAC/C;;IAGF,MAAMC,OAAO,GAAG,IAAIjB,WAAW,EAAE,CAACkB,GAAG,CAAC,eAAe,EAAE,GAAGN,KAAK,EAAE,CAAC;IAClE,MAAMO,OAAO,GAAG;MAAEF;IAAO,CAAE;IAE3B;IACA,MAAMW,GAAG,GAAG,uCAAuC;IACnD,MAAMC,WAAW,GAAG;MAClBC,eAAe,EAAE;QACfzB,QAAQ,EAAE,IAAI,CAACD,YAAY,CAACC,QAAQ;QACpCC,SAAS,EAAE,IAAI,CAACF,YAAY,CAACE;OAC9B;MACDC,UAAU,EAAE;QACVF,QAAQ,EAAEmB,YAAY,CAACnB,QAAQ;QAC/BC,SAAS,EAAEkB,YAAY,CAAClB;OACzB;MACDE,YAAY,EAAE,IAAI,CAACA,YAAY;MAC/BC,iBAAiB,EAAE,IAAI,CAACA;KACzB;IAGD,IAAI,CAACN,IAAI,CAAC4B,IAAI,CAASH,GAAG,EAAEC,WAAW,EAAEV,OAAO,CAAC,CAACE,SAAS,CACxDC,QAAgB,IAAI;MACnB,IAAI,CAACZ,aAAa,GAAGY,QAAQ;IAC/B,CAAC,EACAN,KAAK,IAAI;MACRD,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,IAAI,CAACN,aAAa,GAAG,IAAI;IAC3B,CAAC,CACF;EACH;CACD;AA7EYT,kBAAkB,GAAA+B,UAAA,EAL9BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACWlC,kBAAkB,CA6E9B"},"metadata":{},"sourceType":"module","externalDependencies":[]}